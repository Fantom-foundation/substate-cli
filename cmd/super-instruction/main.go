package main

import (
	"database/sql"
	"encoding/hex"
	"fmt"
	"github.com/ethereum/go-ethereum/core/vm"
	_ "github.com/mattn/go-sqlite3"
	"log"
)

// number of records in a SQLITE3 transaction
// TODO: Command line option for setting the parameter
const MaxNumRecords = 10000

// Percentage of most executed instructions needed to
// dump a super-instruction
// TODO: Command line option for setting the parameter
const ExecutionThreshold = 0.0

// Key for a basic-block for frequency measurement
type BasicBlockKey struct {
	Contract     string // contract in hex format
	Instructions string // instructions in hex format
	Address      uint64 // basic-block start address
}

// node structure of a trie
type OpCodeTrie struct {
	opcode    byte                 // op code
	parent    *OpCodeTrie          // parent node
	children  map[byte]*OpCodeTrie // children of node
	length    uint                 // length of prefix
	frequency uint64               // node frequency
}

var (
	// basic block frequency generated by micro-profiling
	BasicBlockFrequency = map[BasicBlockKey]uint64{}

	// computed op-code frequencies for cross-checking the validity
	OpCodeFrequency = map[byte]uint64{}

	// total number of executed instructions
	TotalInstructions uint64
)

// create new trie node
func NewOpCodeTrie(opcode byte, parent *OpCodeTrie, length uint) *OpCodeTrie {
	p := new(OpCodeTrie)
	p.opcode = opcode
	p.parent = parent
	p.children = make(map[byte]*OpCodeTrie)
	p.length = length
	return p
}

// add sequence to OpCodeTrie
func (root *OpCodeTrie) add(seq []byte, frequency uint64) {
	if seq == nil || len(seq) == 0 {
		log.Fatal("Sequence is empty")
	}
	p := root
	root.frequency += frequency
	for i := 0; i < len(seq); i++ {
		op := seq[i]
		new_p, ok := p.children[op]
		if !ok {
			new_p = NewOpCodeTrie(op, p, p.length+1)
			p.children[op] = new_p
		}
		p = new_p
		p.frequency += frequency
	}
}

// get op-code sequence of a prefix trie node
func (p OpCodeTrie) get() []byte {
	var (
		stack []*OpCodeTrie
		seq   []byte
	)
	for q := &p; q.parent != nil; q = q.parent {
		stack = append(stack, q)
	}
	for i := len(stack) - 1; i >= 0; i-- {
		seq = append(seq, stack[i].opcode)
	}
	return seq
}

// dump trie
// TODO: get rid of global counter
var ctr = 1

func (p OpCodeTrie) dump(db *sql.DB, statement *sql.Stmt) {
	for _, node := range p.children {
		node.dump(db, statement)
		seq := node.get()
		// dump sequences of length greater than 1 and
		// number of executed instructions is beyond the threshold
		if len(seq) > 1 && uint64(p.length)*p.frequency >= TotalInstructions*(100.0-ExecutionThreshold)/100.0 {
			bseq := []byte(string(seq))
			// commit db transaction when maximal number of record per transaction
			// is reached.
			if ctr >= MaxNumRecords {
				ctr = 1
				_, err := db.Exec("END TRANSACTION; BEGIN TRANSACTION;")
				if err != nil {
					log.Fatalln(err.Error())
				}
			} else {
				ctr++
			}
			_, err := statement.Exec(hex.EncodeToString(bseq), node.frequency)
			if err != nil {
				log.Fatalln(err.Error())
			}
		}
	}
}

// read basic block frequency database
func readBasicBlockFrequency() {
	// open sqlite3 database
	db, err := sql.Open("sqlite3", "./basicblocks.db")
	if err != nil {
		log.Fatal(err.Error())
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM BasicBlockFrequency;")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	// read from table and populate the JumpDestFrequency map
	ctr := 1
	for rows.Next() {
		var contract string
		var address uint64
		var instructions string
		var frequency uint64
		err = rows.Scan(&contract, &address, &instructions, &frequency)
		BasicBlockFrequency[BasicBlockKey{Contract: contract, Address: address, Instructions: instructions}] = frequency
		if err != nil {
			log.Fatal(err)
		}
		ctr++
	}
}

// compute all super-instructions
func superInstructions() *OpCodeTrie {
	trie := NewOpCodeTrie(0, nil, 0)
	for bkey, freq := range BasicBlockFrequency {
		// decode the basic block to bytes
		ins, err := hex.DecodeString(bkey.Instructions)
		if err != nil {
			log.Fatal(err)
		}

		// add sequence to trie
		trie.add([]byte(ins), freq)

		// compute op-code frequency (for cross-checking)
		for i := 0; i < len(ins); i++ {
			op := ins[i]
			OpCodeFrequency[op] += freq
			TotalInstructions += freq
		}
	}
	return trie
}

func writeFrequencies(trie *OpCodeTrie) {
	// Dump basic-block frequency statistics into a SQLITE3 database

	// open sqlite3 database
	db, err := sql.Open("sqlite3", "./super-instructions.db") // Open the created SQLite File
	if err != nil {
		log.Fatal(err.Error())
	}
	defer db.Close()

	// switch synchronous mode off, enable memory journaling,
	// and start a new transaction
	_, err = db.Exec("PRAGMA synchronous = OFF;PRAGMA journal_mode = MEMORY")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// drop super-instruction frequency table
	_, err = db.Exec("DROP TABLE IF EXISTS SuperInstructionFrequency;")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// create new table
	_, err = db.Exec("CREATE TABLE SuperInstructionFrequency (instructions TEXT, frequency NUMERIC);")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// start a new transaction
	_, err = db.Exec("BEGIN TRANSACTION")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// prepare the insert statement for faster inserts
	statement, err := db.Prepare("INSERT INTO SuperInstructionFrequency (instructions, frequency) VALUES (?, ?)")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// dump trie in database
	trie.dump(db, statement)

	// end transaction
	_, err = db.Exec("END TRANSACTION;")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// drop super-instruction frequency table
	_, err = db.Exec("DROP TABLE IF EXISTS OpCodeFrequency;")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// create new table
	_, err = db.Exec("CREATE TABLE OpCodeFrequency (opcode TEXT, frequency NUMERIC);")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// begin transaction
	_, err = db.Exec("BEGIN TRANSACTION;")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// prepare the insert statement for faster inserts
	statement, err = db.Prepare("INSERT INTO OpCodeFrequency (opcode, frequency) VALUES (?, ?)")
	if err != nil {
		log.Fatalln(err.Error())
	}

	// dump op-code map into database
	for op, freq := range OpCodeFrequency {
		_, err = statement.Exec(vm.OpCode(op).String(), freq)
		if err != nil {
			log.Fatalln(err.Error())
		}
	}

	// end transaction
	_, err = db.Exec("END TRANSACTION;")
	if err != nil {
		log.Fatalln(err.Error())
	}
}

func main() {
	fmt.Printf("Read Basic-Block frequency database ...\n")
	readBasicBlockFrequency()

	fmt.Printf("Compute all super-instruction/op-code frequencies ...\n")
	trie := superInstructions()

	fmt.Printf("Write super-instruction/op-code frequencies ...\n")
	writeFrequencies(trie)

	fmt.Printf("Done.\n")
}
