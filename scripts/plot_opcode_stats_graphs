#!/bin/bash

# Converts a runtime log file of replay to a sqlite3 database
#  The database substate_metrics.db has a table "runtime" containing 
#  contract address and observed runtime measured in nano-seconds.

PROGNAME=$(basename $0)
if [ -z ${DATABASE} ]; then
	DATABASE=/var/data/substate_metrics.db
fi
if [ -z ${OUTDIR} ]; then
	OUTDIR=.
fi

# run sqlite3 command
#  $1: sqlite3 database filename
#  $2: sqlite3 commmand
function runsql () {
   sqlite3 $1 <<< "$2"
   if [ $? -ne 0 ]
   then
	echo "${PROGNAME}: sqlite3 failed executing $2 on db $1"
	exit 1
   fi
}

# make a temp file for converting log file to a csv file
TMP_FILE=$(mktemp -q /tmp/runtime.XXXXXX.csv || exit 1)

# set trap to clean up file
trap 'rm -f -- "$TMP_FILE"' EXIT


# Plotting
PNG_NAME=${OUTDIR}/opcode_freq.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT ROW_NUMBER() OVER (ORDER BY freq desc) AS id, opcode, freq FROM opcode_frequency ORDER BY freq DESC LIMIT 20;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set xlabel \"Opcode\"
set ylabel \"Count\"
set style fill solid
set boxwidth 0.5
set xtics rotate
plot \"${TMP_FILE}\" using 1:3:xtic(2) with boxes notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/opcode_runtime.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT ROW_NUMBER() OVER (ORDER BY total_runtime_ns desc) AS id, opcode, total_runtime_ns FROM opcode_runtime ORDER BY total_runtime_ns DESC LIMIT 20;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set xlabel \"Opcode\"
set ylabel \"Time (seconds)\"
set style fill solid
set boxwidth 0.5
set xtics rotate
plot \"${TMP_FILE}\" using 1:3:xtic(2) with boxes notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/instruction_frequency_top20.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT execution_freq, instructions FROM instruction_frequency ORDER BY instructions DESC LIMIT 20;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set xlabel \"Number of times instruction executed\"
set ylabel \"Instruction count\"
set style fill solid
set boxwidth 0.5
set xtics rotate
plot \"${TMP_FILE}\" using 1:2 with boxes notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/instruction_frequency_bottom20.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT execution_freq, instructions FROM instruction_frequency ORDER BY instructions ASC LIMIT 20;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set xlabel \"Number of times instruction executed\"
set ylabel \"Instruction count\"
set style fill solid
set boxwidth 0.5
set xtics rotate
plot \"${TMP_FILE}\" using 1:2 with boxes notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/step_length_frequency_top20.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT instruction_length, contracts FROM step_length_frequency ORDER BY contracts DESC LIMIT 20;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set xlabel \"Number of instructions executed\"
set ylabel \"Contract count\"
set style fill solid
set boxwidth 0.5
set xtics rotate
plot \"${TMP_FILE}\" using 1:2 with boxes notitle
"
rm -f -- "$TMP_FILE"

# remove temporary file
rm -f -- "$TMP_FILE"
trap - EXIT
exit
