#!/bin/bash

# Converts a runtime log file of replay to a sqlite3 database
#  The database substate_metrics.db has a table "runtime" containing 
#  contract address and observed runtime measured in nano-seconds.

PROGNAME=$(basename $0)
if [ -z ${DATABASE} ]; then
	DATABASE=/var/data/substate_metrics.db
fi
# run sqlite3 command
#  $1: sqlite3 database filename
#  $2: sqlite3 commmand
function runsql () {
   sqlite3 $1 <<< "$2"
   if [ $? -ne 0 ]
   then
	echo "${PROGNAME}: sqlite3 failed executing $2 on db $1"
	exit 1
   fi
}

# check number of arguments
if [ "$#" -ne 1 ]; then
    echo "${PROGNAME}: specify log-file as single argument."
    exit 1
fi

# check whether log file exists
if [ ! -f "$1" ]; then
   echo "${PROGNAME}: logfile $1 does not exist."
   exit 1
fi


# make a temp file for converting log file to a csv file
TMP_FILE=$(mktemp -q /tmp/runtime.XXXXXX.csv || exit 1)

# set trap to clean up file
trap 'rm -f -- "$TMP_FILE"' EXIT

# Create sqlite3 tables (drop old one)
echo "${PROGNAME}: create sqlite3 tables..."
runsql ${DATABASE} "CREATE TABLE IF NOT EXISTS experiment (type TEXT, creation_date TEXT, chainid TEXT, git_date TEXT, git_commit TEXT);"

# Set experiment time
DATE=`date`
CHAIN_ID=`grep "^chain-id:" $1`
GIT_DATE=`grep "^git-date:" $1`
GIT_COMMIT=`grep "^git-commit:" $1`
runsql ${DATABASE} "INSERT INTO experiment VALUES (\"micro-instrumentation\",\"${DATE}\",\"${CHAIN_ID:9}\",\"${GIT_DATE:9}\",\"${GIT_COMMIT:11}\");"

runsql ${DATABASE} "DROP TABLE IF EXISTS opcode_frequency;"
runsql ${DATABASE} "CREATE TABLE opcode_frequency ( 
			opcode TEXT NOT NULL, 
			freq INTEGER NOT NULL, 
			PRIMARY KEY (opcode));"
runsql ${DATABASE} "DROP TABLE IF EXISTS opcode_runtime;"
runsql ${DATABASE} "CREATE TABLE opcode_runtime ( 
			opcode TEXT NOT NULL, 
			total_runtime_ns INTEGER NOT NULL, 
			PRIMARY KEY (opcode));"
runsql ${DATABASE} "DROP TABLE IF EXISTS instruction_frequency;"
runsql ${DATABASE} "CREATE TABLE instruction_frequency ( 
			execution_freq INTEGER NOT NULL, 
			instructions INTEGER NOT NULL, 
			PRIMARY KEY (execution_freq));"
runsql ${DATABASE} "DROP TABLE IF EXISTS step_length_frequency;"
runsql ${DATABASE} "CREATE TABLE step_length_frequency ( 
			instruction_length INTEGER NOT NULL, 
			contracts INTEGER NOT NULL, 
			PRIMARY KEY (instruction_length));"

# Convert log output to a csv file and import
echo "${PROGNAME}: convert log-file to csv-file and import..."
grep "^opcode-freq" $1 | sed 's/^opcode-freq: //' > ${TMP_FILE}
runsql ${DATABASE} ".mode csv
.import ${TMP_FILE} opcode_frequency"

grep "^opcode-runtime" $1 | sed 's/^opcode-runtime: //' > ${TMP_FILE}
runsql ${DATABASE} ".mode csv
.import ${TMP_FILE} opcode_runtime"

grep "^instruction-freq" $1 | sed 's/^instruction-freq: //' > ${TMP_FILE}
runsql ${DATABASE} ".mode csv
.import ${TMP_FILE} instruction_frequency"

grep "^steplen-freq" $1 | sed 's/^steplen-freq: //' > ${TMP_FILE}
runsql ${DATABASE} ".mode csv
.import ${TMP_FILE} step_length_frequency"

# remove temporary file
rm -f -- "$TMP_FILE"
trap - EXIT
exit
