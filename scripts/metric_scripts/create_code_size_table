#!/bin/bash

PROGNAME=$(basename $0)
SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
if [ -z ${DATABASE} ]; then
	DATABASE=/var/data/substate_metrics.db
fi
# run sqlite3 command
#  $1: sqlite3 database filename
#  $2: sqlite3 commmand
function runsql () {
   sqlite3 $1 <<< "$2"
   if [ $? -ne 0 ]
   then
	echo "${PROGNAME}: sqlite3 failed executing $2 on db $1"
	exit 1
   fi
}

# check number of arguments
if [ "$#" -ne 1 ]; then
    echo "${PROGNAME}: specify log-file as single argument."
    exit 1
fi

# check whether log file exists
if [ ! -f "$1" ]; then
   echo "${PROGNAME}: logfile $1 does not exist."
   exit 1
fi

# make a temp file for converting log file to a csv file
TMP_FILE=$(mktemp -q /tmp/runtime.XXXXXX.csv || exit 1)

# set trap to clean up file
trap 'rm -f -- "$TMP_FILE"' EXIT

# Convert log output to a csv file
echo "${PROGNAME}: convert log-file to csv-file..."
grep "^metric" $1 | sed 's/^metric: //' >$TMP_FILE
# check whether file exists
if [ ! -f "${SCRIPTPATH}/codesize_pre_4564036.csv" ]; then
   echo "${PROGNAME}: warning: codesize_pre_4564036.csv does not exist. Output may be inaccurate!"
   echo "${PROGNAME}: the file is available at https://drive.google.com/drive/folders/1dHMbt6rpyoioYDdKKnslUyb2TS8JPT_k"
else
   cat ${SCRIPTPATH}/codesize_pre_4564036.csv >> ${TMP_FILE}
fi

# Create sqlite3 table (drop old one)
echo "${PROGNAME}: create sqlite3 tables..."
runsql ${DATABASE} "CREATE TABLE IF NOT EXISTS experiment (type TEXT, creation_date TEXT, chainid TEXT, git_date TEXT, git_commit TEXT);"
runsql ${DATABASE} "DROP TABLE IF EXISTS substate_code_size;"
runsql ${DATABASE} "CREATE TABLE substate_code_size ( block_number INTEGER NOT NULL, block_timestamp INTEGER NOT NULL, tx_number INTEGER NOT NULL, contract TEXT NOT NULL, code_size_bytes INTEGER NOT NULL, nonce INTEGER NOT NULL, tx_type TEXT NOT NULL, PRIMARY KEY (block_number, tx_number, contract));"

# Set experiment time
DATE=`date`
CHAIN_ID=`grep "^chain-id:" $1`
GIT_DATE=`grep "^git-date:" $1`
GIT_COMMIT=`grep "^git-commit:" $1`
runsql ${DATABASE} "INSERT INTO experiment VALUES (\"code-size\",\"${DATE}\",\"${CHAIN_ID:9}\",\"${GIT_DATE:9}\",\"${GIT_COMMIT:11}\");"

# Load CSV file into sqlite3
echo "${PROGNAME}: import csv-file..."
runsql ${DATABASE} ".mode csv
.import ${TMP_FILE} substate_code_size"

echo "${PROGNAME}: create analytic tables..."
runsql ${DATABASE} "DROP TABLE IF EXISTS contract_code_size;"
runsql ${DATABASE} "CREATE TABLE contract_code_size AS SELECT contract, MAX(code_size_bytes) AS code_size_bytes, MAX(nonce) AS nonce, tx_type FROM substate_code_size GROUP BY contract HAVING MAX(code_size_bytes) > 0;"

runsql ${DATABASE} "DROP TABLE IF EXISTS code_size_growth;"
runsql ${DATABASE} "CREATE TABLE code_size_growth AS
SELECT
	block_timestamp,
	sum(code_size_delta) AS code_size_delta,
	sum(nonce_delta) AS nonce_delta
FROM (
	SELECT
		block_timestamp,
		contract,
		code_size_bytes - LAG(code_size_bytes, 1, 0) OVER (PARTITION BY contract ORDER BY block_timestamp ASC) AS code_size_delta,
		nonce - LAG(nonce, 1, 0) OVER (PARTITION BY contract ORDER BY block_timestamp ASC) AS nonce_delta
	FROM (
	    SELECT
		(block_timestamp / 604800) * 604800 AS block_timestamp,
		contract,
		MAX(code_size_bytes) AS code_size_bytes,
		MAX(nonce) AS nonce
	    FROM
		substate_code_size
	    GROUP BY contract, (block_timestamp / 604800) * 604800
	    HAVING MAX(code_size_bytes) > 0
	)
)
GROUP BY block_timestamp;"

runsql ${DATABASE} "DROP TABLE IF EXISTS total_code_size;"
runsql ${DATABASE} "CREATE TABLE total_code_size AS
SELECT
    v1.block_timestamp,
    sum(v2.code_size_delta) code_size,
    sum(v2.nonce_delta) nonce
FROM code_size_growth v1
JOIN code_size_growth v2
ON v1.block_timestamp >= v2.block_timestamp
GROUP BY v1.block_timestamp;"

# remove temporary file
rm -f -- "$TMP_FILE"
trap - EXIT
exit
