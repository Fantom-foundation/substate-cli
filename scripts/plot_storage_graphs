#!/bin/bash

# Converts a runtime log file of replay to a sqlite3 database
#  The database substate_metrics.db has a table "runtime" containing 
#  contract address and observed runtime measured in nano-seconds.

PROGNAME=$(basename $0)
if [ -z ${DATABASE} ]; then
	DATABASE=/var/data/substate_metrics.db
fi
if [ -z ${OUTDIR} ]; then
	OUTDIR=.
fi

# run sqlite3 command
#  $1: sqlite3 database filename
#  $2: sqlite3 commmand
function runsql () {
   sqlite3 $1 <<< "$2"
   if [ $? -ne 0 ]
   then
	echo "${PROGNAME}: sqlite3 failed executing $2 on db $1"
	exit 1
   fi
}

# make a temp file for converting log file to a csv file
TMP_FILE=$(mktemp -q /tmp/runtime.XXXXXX.csv || exit 1)

# set trap to clean up file
trap 'rm -f -- "$TMP_FILE"' EXIT


# Plotting
PNG_NAME=${OUTDIR}/storage_account.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT storage_bytes FROM v_max_contract_storage where storage_bytes > 0 ORDER BY storage_bytes ASC;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set logscale y
set xlabel \"Smart contracts\"
set ylabel \"Storage (bytes)\"
set autoscale xfix
plot \"${TMP_FILE}\" notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/storage_transaction.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT storage_bytes FROM v_transaction_storage ORDER BY storage_bytes ASC;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set logscale y
set xlabel \"Smart contracts\"
set ylabel \"Storage (bytes)\"
set autoscale xfix
plot \"${TMP_FILE}\" notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/storage_block.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT storage_bytes FROM v_block_storage ORDER BY storage_bytes ASC;
"
gnuplot <<< "
set terminal pngcairo size 800, 600
set output \"${PNG_NAME}\"
set logscale y
set xlabel \"Smart contracts\"
set ylabel \"Storage (bytes)\"
set autoscale xfix
plot \"${TMP_FILE}\" notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/storage_transaction_growth.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT block_timestamp, storage_bytes FROM v_transaction_storage ASC;
"
gnuplot <<< "
set terminal pngcairo size 800,600
set output \"${PNG_NAME}\"
set xdata time
set format x \"%Y-%m\"
set timefmt \"%d\"
set ylabel \"Storage (bytes)\"
set autoscale xfix
plot \"${TMP_FILE}\" using (\$1):2 with points pointtype 0 notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/storage_block_growth.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT block_timestamp, storage_bytes FROM v_block_storage ASC;
"
gnuplot <<< "
set terminal pngcairo size 800,600
set output \"${PNG_NAME}\"
set xdata time
set format x \"%Y-%m\"
set timefmt \"%d\"
set ylabel \"Storage (bytes)\"
set autoscale xfix
plot \"${TMP_FILE}\" using (\$1):2 with points pointtype 7 notitle
"
rm -f -- "$TMP_FILE"

PNG_NAME=${OUTDIR}/storage_blockchain_growth.png
echo "${PROGNAME}: produce plot ${PNG_NAME} ..."
runsql ${DATABASE} ".mode tabs
.output ${TMP_FILE}
SELECT block_timestamp, storage_bytes FROM v_blockchain_storage_growth ASC;
"
gnuplot <<< "
set terminal pngcairo size 800,600
set output \"${PNG_NAME}\"
set xdata time
set format x \"%Y-%m\"
set timefmt \"%d\"
set ylabel \"Storage (bytes)\"
set autoscale xfix
plot \"${TMP_FILE}\" using (\$1):2 with points pointtype 7 notitle
"
rm -f -- "$TMP_FILE"

# remove temporary file
rm -f -- "$TMP_FILE"
trap - EXIT
exit
