#!/bin/bash

# Converts a runtime log file of replay to a sqlite3 database
#  The database runtime.db has a table "runtime" containing
#  contract address and observed runtime measured in nano-seconds.

PROGNAME=$(basename $0)
if [ -z ${DATABASE} ]; then
	DATABASE=/var/data/substate_metrics.db
fi
# run sqlite3 command
#  $1: sqlite3 database filename
#  $2: sqlite3 commmand
function runsql () {
   sqlite3 $1 <<< "$2"
   if [ $? -ne 0 ]
   then
	echo "${PROGNAME}: sqlite3 failed executing $2 on db $1"
	exit 1
   fi
}

# check number of arguments
if [ "$#" -ne 1 ]; then
    echo "${PROGNAME}: specify log-file as single argument."
    exit 1
fi

# check whether log file exists
if [ ! -f "$1" ]; then
   echo "${PROGNAME}: logfile $1 does not exist."
   exit 1
fi

# make a temp file for converting log file to a csv file
TMP_FILE=$(mktemp -q /tmp/runtime.XXXXXX.csv || exit 1)

# set trap to clean up file
trap 'rm -f -- "$TMP_FILE"' EXIT

# Convert log output to a csv file
echo "${PROGNAME}: convert log-file to csv-file..."
grep "^call" $1 | sed 's/^call: //' >$TMP_FILE

# Create sqlite3 table (drop old one)
echo "${PROGNAME}: create sqlite3 tables..."
runsql ${DATABASE} "CREATE TABLE IF NOT EXISTS experiment (type TEXT, creation_date TEXT, chainid TEXT, git_date TEXT, git_commit TEXT);"
runsql ${DATABASE} "DROP TABLE IF EXISTS recorded_contract_runtime;"
runsql ${DATABASE} "CREATE TABLE recorded_contract_runtime ( block_number INTEGER NOT NULL, tx_number INTEGER NOT NULL, contract TEXT NOT NULL, runtime INTEGER NOT NULL);"

# Set experiment time
DATE=`date`
CHAIN_ID=`grep "^chain-id:" $1`
GIT_DATE=`grep "^git-date:" $1`
GIT_COMMIT=`grep "^git-commit:" $1`
runsql ${DATABASE} "INSERT INTO experiment VALUES (\"recorded-runtime\",\"${DATE}\",\"${CHAIN_ID:9}\",\"${GIT_DATE:9}\",\"${GIT_COMMIT:11}\");"

# Load CSV file into sqlite3
echo "${PROGNAME}: import csv-file..."
runsql ${DATABASE} ".mode csv
.import ${TMP_FILE} recorded_contract_runtime"

# Compute summary if both recordeed and replayed tables exist
echo "${PROGNAME}: create speed comparison table..."
HasReplayedTable=`runsql ${DATABASE} "SELECT name FROM sqlite_master WHERE type='table' AND name='contract_runtime';"`

if [ -z ${HasReplayedTable} ]; then
	echo "${PROGNAME}: contract_runtime table does not exist. Comparison table is not created. Profiling evm call in replay mode before continue."
	exit 0
fi

runsql ${DATABASE} "DROP TABLE IF EXISTS summary_record_replay "
runsql ${DATABASE} "CREATE TABLE summary_record_replay(block_number INTEGER NOT NULL, tx_number INTEGER NOT NULL, contract TEXT NOT NULL, speedup NUMERIC NOT NULL);"
runsql ${DATABASE} "INSERT INTO summary_record_replay
SELECT
	rec.block_number,
	rec.tx_number,
	rec.contract,
	(rec.runtime/1.0e9) / (rep.runtime/1.0e9)
FROM recorded_contract_runtime rec, recorded_contract_runtime rep
WHERE rec.block_number = rep.block_number
	AND rec.tx_number = rep.tx_number
	AND rec.contract = rep.contract;"

# remove temporary file
rm -f -- "$TMP_FILE"
trap - EXIT
exit
